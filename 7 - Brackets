/**
 * https://app.codility.com/demo/results/trainingP8P6F9-KRJ/
 * O(N)
 * 37%
 */

class Solution {
    public int solution(String S) {
        Stack<Character> s = new Stack<Character>();
        boolean isNested = true;
        
        ArrayList<Character> entryList = new ArrayList<Character>();
        ArrayList<Character> lastList = new ArrayList<Character>();
        
        entryList.add('[');
        lastList.add(']');
        entryList.add('(');
        lastList.add(')');
        entryList.add('{');
        lastList.add('}');
        
        for (int i = 0; i < S.length() && isNested; i++) {
            if (entryList.contains(S.charAt(i))) {
                s.push(S.charAt(i));
            } else if (!s.empty()){
                int lastIndex = lastList.indexOf(S.charAt(i));
                char popped = s.pop();
                int poppedIndex = entryList.indexOf(popped);
                if (lastIndex != poppedIndex) {
                    isNested = false;
                }
            } else {
                isNested = false;
            }
        }
        return isNested? 1: 0;
    }
}

/**
 * https://app.codility.com/demo/results/training5TUCF2-WFD/
 * O(N)
 * 100%
 */

class Solution {
    public int solution(String S) {
        Stack<Character> s = new Stack<Character>();
        boolean isNested = true;
        
        ArrayList<Character> entryList = new ArrayList<Character>();
        ArrayList<Character> lastList = new ArrayList<Character>();
        
        entryList.add('[');
        lastList.add(']');
        entryList.add('(');
        lastList.add(')');
        entryList.add('{');
        lastList.add('}');
        
        for (int i = 0; i < S.length() && isNested; i++) {
            if (entryList.contains(S.charAt(i))) {
                s.push(S.charAt(i));
            } else if (!s.empty()){
                int lastIndex = lastList.indexOf(S.charAt(i));
                char popped = s.pop();
                int poppedIndex = entryList.indexOf(popped);
                if (lastIndex != poppedIndex) {
                    isNested = false;
                }
            } else {
                isNested = false;
            }
        }
        return isNested && s.empty() ? 1: 0;
    }
}